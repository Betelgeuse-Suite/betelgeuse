- What happens when a tye changes? Currently it owuld still be a patch. 
    But the diffing should take in account the tyes as well, because changing
    a type is a breaking change.

- MINOR version not working properly??
  EDIT Sept 7, 2017: Yes, I can confirm this. It says an additino is a major while it should simply be a minor.


- WIP - version it
    - create a registry of versions, which the App can read and decide if it needs to download or not
    Edit: 09.18.2017 
        
        - Next Steps: - Start an Ionic App, and test the data fetching and saving on the device
                      - Once the versioning works in Ionic, start playing around with Swift files

        - Able to push refresh the versions each time based on tags and push them to #master
        - Added a ts client sdk, that is able to fetch the versions.js from the repo through a proxy cdn.

- DONE: add types
    - based on the schema, create .d.ts file, that is used at compile time
    - this file gets included in the build process, like any other dependency
    - since it's based on version, it means that it will work with multiple
    patch/minor version of the src file

    Look at these JSON to Type Generators for different languages:
    - http://json2ts.com/
    - http://jsonclassgenerator.codeplex.com/
    - http://pojo.sodhanalibrary.com/ or http://www.jsonschema2pojo.org/ and https://github.com/joelittlejohn/jsonschema2pojo/wiki/Getting-Started#the-command-line-interface
    
    - https://github.com/insanoid/SwiftyJSONAccelerator

- deploy to s3
    - add to circle ci
        - deploy on commit to master
        - deploy on commit to staging


done - find all the yaml files
done - combine them into one based on their relative path + name
    done - the name of the file becomes the root while the directory the parent root
done - convert the whole thing to json





# NOT IMPORTANT IN PHASE 1

- Sept 18, 2017: Idea: What if each major version is created on a new a branch each time, so it becomes easier to push changes to older versions?!
- Hmmm, what if master always acts as the version registry, while each major lives a seperate life on its own branch

- maybe develop an SDK to integraet with the app?

- add a cli to creating all the steps

- build a cross platform editor
    - it's pretty hard to edit files on github
    - especially data structures such as yaml/json/xml
    - I think it would be best to build a key/value pair editor which handles all the
        versioning, diffing, validation and deployment
    - the editor would be a full replacement the yaml files interface (which can still be used by the dev)
    - now the editor becomes a full platform, that lives at its dedicated url
    - at its simplest is just a facade to the en.json
        - but it fulfils other requirements as well, such as:
            - validate the input
            - show the errors
            - set the version based on the changes type
            - upload it to s3
            - offer raw input (to make it easy to migrate from production to staging)
            - show older versions in a read-only fashion
            - able to edit older versions, but it must always get the diff from the latest released
            version, and thus always increase the version.
                - this will allow the older clients to still work
                    - although now that I'm thinking about, no user can download an old version of the app
                    which means that no old client will need to download a next version (since it already has
                    a version installed)