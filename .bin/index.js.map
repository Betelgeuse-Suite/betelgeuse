{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,qCAAuC;AACvC,+BAAiC;AACjC,kCAAoC;AAEpC,+BAAqC;AACrC,yCAIqB;AAErB,IAAM,GAAG,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACvC,+BAMgB;AAEhB,2CAA0C;AAE1C,+CAA2D;AAC3D,iDAAgD;AAChD,yDAAyD;AACzD,qCAA2C;AAE3C,IAAM,oBAAoB,GAAG,UAAC,MAAc,EAAE,OAA8B;IAA9B,wBAAA,EAAA,YAA8B;IAC1E,MAAM,CAAC,OAAO;SACX,OAAO,CAAC,wCAAyB,CAAC,MAAM,CAAC,CAAC;SAC1C,IAAI,CAAC,UAAC,IAAI;QACT,EAAE,CAAC,CAAC,OAAO,OAAO,CAAC,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;YACpC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;QAED,MAAM,CAAC,uBAAU,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACvC,CAAC,CAAC;SACD,IAAI,CAAC,kBAAW,CAAC;QAChB,OAAO,CAAC,GAAG,CAAC,wCAAwC,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;IACnF,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAA;AAED,IAAM,qBAAqB,GAAG,UAAC,YAAoB,EAAE,OAA8B;IAA9B,wBAAA,EAAA,YAA8B;IACjF,MAAM,CAAC,OAAO;SACX,OAAO,CAAC,6BAAa,CAAC,YAAY,CAAC,CAAC;SACpC,IAAI,CAAC,uBAAgB,CAAC,UAAC,EAAK;YAAJ,WAAG;QAC1B,EAAE,CAAC,CAAC,OAAO,OAAO,CAAC,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;YACpC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,MAAM,CAAC;QACT,CAAC;QAED,MAAM,CAAC,gBAAS,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;SACF,IAAI,CAAC,kBAAW,CAAC;QAChB,OAAO,CAAC,GAAG,CAAC,6CAA6C,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;IAC9F,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAA;AAED,SAAS;KACN,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;AAGvB,SAAS;KACN,OAAO,CAAC,wBAAwB,CAAC;KACjC,MAAM,CAAC,aAAa,EAAE,kBAAkB,CAAC;KACzC,MAAM,CAAC,oBAAoB,CAAC,CAAC;AAGhC,IAAM,uBAAuB,GAAG,UAAC,YAAoB,EAAE,YAAoB;IACzE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;QACjB,eAAQ,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,gBAAS,CAAC;QACtC,eAAQ,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,gBAAS,CAAC;KACvC,CAAC;SACC,IAAI,CAAC,UAAC,EAAY;YAAX,YAAI,EAAE,YAAI;QAAM,OAAA,wBAAc,CAAC,IAAI,EAAE,IAAI,CAAC;IAA1B,CAA0B,CAAC,CAAC;AACxD,CAAC,CAAA;AAED,IAAM,sBAAsB,GAAG,UAAC,YAAoB,EAAE,YAAoB;IACxE,OAAO;SACJ,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;SAC5D,IAAI,CAAC,UAAC,OAAO;QACZ,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;AACP,CAAC,CAAA;AAED,SAAS;KACN,OAAO,CAAC,gDAAgD,CAAC;KACzD,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAGlC,SAAS;KACN,OAAO,CAAC,+BAA+B,CAAC;KACxC,MAAM,CAAC,aAAa,EAAE,uBAAuB,CAAC;KAC9C,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAIjC,IAAM,yBAAyB,GAAG,UAAC,OAAe,EAAE,OAA8B;IAA9B,wBAAA,EAAA,YAA8B;IAChF,MAAM,CAAC,OAAO;SACX,OAAO,CAAC,sCAAkB,CAAC,OAAO,CAAC,CAAC;SACpC,IAAI,CAAC,UAAC,EAAY;YAAX,kBAAU;QACT,IAAA,mBAAG,EAAE,kBAAE,CAAe;QAE7B,EAAE,CAAC,CAAC,OAAO,OAAO,CAAC,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;YACpC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAChB,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAEhB,MAAM,CAAC;QACT,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;YACjB,gBAAS,CAAI,OAAO,CAAC,GAAG,sBAAmB,EAAE,GAAG,CAAC;YACjD,gBAAS,CAAI,OAAO,CAAC,GAAG,oBAAiB,EAAE,EAAE,CAAC;SAC/C,CAAC;aAEC,IAAI,CAAC,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC,CAAC;IAC3B,CAAC,CAAC;SACD,IAAI,CAAC,kBAAW,CAAC;QAChB,OAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC,CAAC;AAER,CAAC,CAAA;AAED,IAAM,cAAc,GAAG;IACrB,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,MAAM,CAAC;AACrD,CAAC,CAAA;AAED,IAAM,YAAY,GAAG,UAAC,OAAe,EAAE,QAAgB;IACrD,IAAM,GAAG,GAAM,QAAQ,SAAM,CAAC;IAC9B,IAAM,QAAQ,GAAM,QAAQ,UAAO,CAAC;IAEpC,MAAM,CAAC,OAAO;SACX,OAAO,CAAC,uBAAuB,CAAI,GAAG,SAAI,OAAO,UAAO,EAAK,QAAQ,SAAI,OAAO,UAAO,CAAC,CAAC;SACzF,IAAI,CAAC,UAAC,WAAW;QAChB,EAAE,CAAC,CAAC,WAAW,KAAK,MAAM,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,8BAAkB,EAAE,CAAC,CAAA;QACjD,CAAC;QAED,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC,CAAC;SACD,IAAI,CAAC,kBAAW,CAAC,UAAC,WAAW;QAC5B,EAAE,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,6BAAiB,EAAE,CAAC,CAAA;QAChD,CAAC;QAGD,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC1B,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAEtB,KAAK,CAAC,EAAE,CAAC,IAAI,EAAK,GAAG,OAAI,EAAE,QAAQ,CAAC,CAAA;QACpC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;SACF,IAAI,CAAC,kBAAW,CAAC;QAEhB,KAAK,CAAC,IAAI,CAAC,aAAW,QAAU,CAAC,CAAC;QAClC,KAAK,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;SACF,IAAI,CAAC,UAAC,WAAW;QAEhB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAe,WAAa,CAAC,CAAC;IAClD,CAAC,CAAC;SACD,IAAI,CAAC;QAEJ,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;AACP,CAAC,CAAA;AAED,SAAS;KACN,OAAO,CAAC,gCAAgC,CAAC;KACzC,MAAM,CAAC,OAAO,EAAE,uBAAuB,CAAC;KACxC,MAAM,CAAC,yBAAyB,CAAC,CAAC;AAIrC,IAAM,eAAe,GAAG,UAAC,QAAgB;IAEvC,IAAM,OAAO,GAAG,OAAO,CAAC;IAExB,IAAM,GAAG,GAAM,QAAQ,SAAM,CAAC;IAC9B,IAAM,QAAQ,GAAM,QAAQ,UAAO,CAAC;IAEpC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAErB,MAAM,CAAC,OAAO;SACX,OAAO,EAAE;SACT,IAAI,CAAC;QAEJ,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACrB,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACnB,CAAC,CAAC;SACD,IAAI,CAAC,cAAM,OAAA,oBAAoB,CAAI,QAAQ,YAAS,EAAE,EAAE,GAAG,EAAK,GAAG,SAAI,OAAO,UAAO,EAAE,CAAC,EAA7E,CAA6E,CAAC;SACzF,IAAI,CAAC,cAAM,OAAA,qBAAqB,CAAI,GAAG,SAAI,OAAO,UAAO,EAAE,EAAE,GAAG,EAAK,GAAG,SAAI,OAAO,UAAO,EAAE,CAAC,EAAlF,CAAkF,CAAC;SAC9F,IAAI,CAAC,cAAM,OAAA,yBAAyB,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,KAAG,GAAK,EAAE,CAAC,EAArD,CAAqD,CAAC;SACjE,IAAI,CAAC,cAAM,OAAA,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,EAA/B,CAA+B,CAAC;SAC3C,KAAK,CAAC,UAAC,CAAY,IAAK,OAAA,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,EAAxB,CAAwB,CAAC,CAAC;AACvD,CAAC,CAAA;AAED,SAAS;KACN,OAAO,CAAC,0BAA0B,CAAC;KACnC,MAAM,CAAC,eAAe,CAAC,CAAC;AAO3B,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC","sourcesContent":["import * as commander from 'commander';\nimport * as shell from 'shelljs';\nimport * as Promise from 'bluebird';\n\nimport { passThrough } from './util';\nimport {\n  Exception,\n  NoChangesException,\n  UncommitedChanges,\n} from './Exception';\n\nconst pkg = require('../package.json');\nimport {\n  objToJson,\n  readFile,\n  jsonToObj,\n  passThroughAwait,\n  writeFile,\n} from './util';\nimport * as beautify from 'js-beautify';\nimport { createFile } from './CreateFile';\n\nimport { generateJSONFromYamlFiles } from './GenerateJSON';\nimport { generateTypes } from './GenerateTypes';\nimport { generateClientSDKs } from './GenerateClientSDK';\nimport { getReleaseType } from './Version';\n\nconst command_generateJson = (srcDir: string, options: { out?: string } = {}) => {\n  return Promise\n    .resolve(generateJSONFromYamlFiles(srcDir))\n    .then((json) => {\n      if (typeof options.out !== 'string') {\n        console.log(json);\n        return Promise.resolve(json);\n      }\n\n      return createFile(options.out, json);\n    })\n    .then(passThrough(() => {\n      console.log('Successfully generated JSON files from', srcDir, 'at', options.out);\n    }));\n}\n\nconst command_generateTypes = (jsonFilePath: string, options: { out?: string } = {}) => {\n  return Promise\n    .resolve(generateTypes(jsonFilePath))\n    .then(passThroughAwait(([tsd]) => {\n      if (typeof options.out !== 'string') {\n        console.log(tsd);\n        return;\n      }\n\n      return writeFile(options.out, tsd);\n    }))\n    .then(passThrough(() => {\n      console.log('Successfully generated Typescript .tsd from', jsonFilePath, 'at', options.out);\n    }));\n}\n\ncommander\n  .version(pkg.version)\n\n// Step 1 - Generate the json from yaml\ncommander\n  .command('generate-json <srcDir>')\n  .option('--out [out]', 'Output file path')\n  .action(command_generateJson);\n\n// Step 2 - Get the Release Type by comparing the previous file with the generated one\nconst getReleaseTypeFromFiles = (nextJsonPath: string, prevJsonPath: string) => {\n  return Promise.all([\n    readFile(nextJsonPath).then(jsonToObj),\n    readFile(prevJsonPath).then(jsonToObj),\n  ])\n    .then(([prev, next]) => getReleaseType(prev, next));\n}\n\nconst command_getReleaseType = (nextJsonPath: string, prevJsonPath: string) => {\n  Promise\n    .resolve(getReleaseTypeFromFiles(nextJsonPath, prevJsonPath))\n    .then((release) => {\n      console.log('Version type:', release);\n    });\n}\n\ncommander\n  .command('get-release-type <nextJsonPath> <prevJsonPath>')\n  .action(command_getReleaseType);\n\n// Step 3 - Generate the Type file\ncommander\n  .command('generate-types <jsonFilePath>')\n  .option('--out [out]', 'Output directory path')\n  .action(command_generateTypes);\n\n// Extra Step - Generate Client SDK template\n\nconst command_generateClientSDK = (appName: string, options: { out?: string } = {}) => {\n  return Promise\n    .resolve(generateClientSDKs(appName))\n    .then(([typescript]) => {\n      const [dts, js] = typescript;\n\n      if (typeof options.out !== 'string') {\n        console.log(dts);\n        console.log('');\n        console.log(js);\n\n        return;\n      }\n\n      return Promise.all([\n        writeFile(`${options.out}/beetlejuice.d.ts`, dts),\n        writeFile(`${options.out}/beetlejuice.js`, js),\n      ])\n        // return a single value, otherwise the compiler complains.\n        .then(() => undefined);\n    })\n    .then(passThrough(() => {\n      console.log('Successfully generated SDKs at', options.out);\n    }));\n\n}\n\nconst untrackedFiles = () => {\n  return !!shell.exec('git diff --name-only').stdout;\n}\n\nconst applyVersion = (AppName: string, repoPath: string) => {\n  const tmp = `${repoPath}/tmp`;\n  const compiled = `${repoPath}/.bin`;\n\n  return Promise\n    .resolve(getReleaseTypeFromFiles(`${tmp}/${AppName}.json`, `${compiled}/${AppName}.json`))\n    .then((releaseType) => {\n      if (releaseType === 'none') {\n        return Promise.reject(new NoChangesException())\n      }\n\n      return releaseType;\n    })\n    .then(passThrough((releaseType) => {\n      if (untrackedFiles()) {\n        return Promise.reject(new UncommitedChanges())\n      }\n\n      // Move the files over\n      shell.rm('-rf', compiled);\n      shell.mkdir(compiled);\n\n      shell.cp('-R', `${tmp}/*`, compiled)\n      shell.rm('-rf', tmp);\n    }))\n    .then(passThrough(() => {\n      // Commit the compile step\n      shell.exec(`git add ${compiled}`);\n      shell.exec(`git commit -m 'Beetlejuice Commit: Source Compiled.'`);\n    }))\n    .then((releaseType) => {\n      // Apply the version, by using `npm version` which creates a commit and a relese tag\n      return shell.exec(`npm version ${releaseType}`);\n    })\n    .then(() => {\n      // Deploy the copmiled changes (by pushing to git repo to its remote origin)\n      return shell.exec('git push origin master; git push --tags');\n    });\n}\n\ncommander\n  .command('generate-client-sdks <AppName>')\n  .option('--out', 'Output directory path')\n  .action(command_generateClientSDK);\n\n// The compile command takes care of:\n//  Steps 1, 2, 3 and 4 - - Apply the next version to both generated files\nconst command_compile = (repoPath: string) => {\n  // validate is beetlejuice repo: ./source, ./compiled dir and package.json or smtg like that\n  const AppName = 'MyApp';\n\n  const tmp = `${repoPath}/tmp`;\n  const compiled = `${repoPath}/.bin`;\n\n  console.log('HELLO');\n\n  return Promise\n    .resolve()\n    .then(() => {\n      // Clean Step\n      shell.rm('-rf', tmp);\n      shell.mkdir(tmp);\n    })\n    .then(() => command_generateJson(`${repoPath}/source`, { out: `${tmp}/${AppName}.json` })) // => json\n    .then(() => command_generateTypes(`${tmp}/${AppName}.json`, { out: `${tmp}/${AppName}.d.ts` })) // => tsd\n    .then(() => command_generateClientSDK(AppName, { out: `${tmp}` })) // => client sdks \n    .then(() => applyVersion(AppName, repoPath)) // => apply next version\n    .catch((e: Exception) => console.error(e.message));\n}\n\ncommander\n  .command('compile <repositoryPath>')\n  .action(command_compile);\n\n\n// Step 5 - Push new files to the CDN\n// No need for it yet, as we can use the git repo for testing\n\n\ncommander.parse(process.argv);\n"]}