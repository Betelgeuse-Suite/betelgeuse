{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/GenerateJSON/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as yaml from 'yamljs';\nimport * as R from 'ramda';\nimport * as Promise from 'bluebird';\nimport * as  clc from 'cli-color';\n\nimport {\n  readFiles,\n  ReadFile,\n  objToJson,\n  passThrough,\n} from '../util';\n\n\nconst insertPathInto = (path: string, parent: any, leafValue: any): { path: string } => {\n  const dirs = path.split('/');\n  const key = dirs[0];\n\n  if (dirs.length > 1) {\n    parent[key] = parent[key] || {};\n    return insertPathInto(path.slice(path.indexOf('/') + 1), parent[key], leafValue);\n  } else {\n    parent[key] = leafValue;\n    return parent;\n  }\n};\n\nconst concatObjects: (fs: ReadFile[]) => { [i: string]: any } =\n  R.reduce((result, file: ReadFile) => {\n    insertPathInto(file.path, result, file.content);\n\n    return result;\n  }, {});\n\nconst stripFileExtension = (file: ReadFile): ReadFile => {\n  return R.set(\n    R.lensProp('path'),\n    file.path.slice(0, file.path.lastIndexOf('.')),\n    file,\n  );\n}\nconst stripRoot = R.curry((rootPath: string, file: ReadFile): ReadFile => {\n  return R.set(\n    R.lensProp('path'),\n    file.path.slice(rootPath.length),\n    file,\n  );\n});\n\nconst isYamlFile = (f: ReadFile) => {\n  const ext = f.path.slice(f.path.lastIndexOf('.') + 1);\n  return ext === 'yaml' || ext === 'yml';\n};\nconst onlyYAML: (f: ReadFile[]) => ReadFile[] =\n  R.filter((f) => isYamlFile(f));\n\n\nexport const generateJSONFromYamlFiles = (atPath: string) => new Promise((resolve, reject) => {\n  readFiles(atPath, (files) => {\n    const result = concatObjects(R.map((f) => {\n      try {\n        var parsed = yaml.parse(f.content);\n      } catch (e) {\n        console.log(clc.red('YAML Error:', e.message, 'at line', e.parsedLine));\n        console.log(clc.white('      File: ' + f.path));\n        throw 'End Error';\n      }\n\n      return R.merge(f, {\n        content: parsed,\n        path: R.pipe(\n          stripFileExtension,\n          stripRoot(atPath),\n        )(f).path\n      });\n\n    }, onlyYAML(files)));\n\n    resolve(result);\n  }, (e) => {\n    console.log(clc.red('Read File Error:', e.message));\n    reject(e);\n  })\n})\n  .then(objToJson);\n"]}