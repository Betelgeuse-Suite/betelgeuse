{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/Version/index.ts"],"names":[],"mappings":";;AAAA,yBAA2B;AAC3B,+BAAiC;AAEjC,0CAAkD;AAClD,iDAAgD;AAWnC,QAAA,cAAc,GAAG,UAAC,IAAiB,EAAE,IAAiB;IACjE,MAAM,CAAC,6BAAa,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC;AAC7C,CAAC,CAAA;AAGY,QAAA,cAAc,GACzB,UAAC,IAAoB,EAAE,IAAiB,IAAK,OAAA,MAAM,CAAC,GAAG,CACnD,IAAI,CAAC,SAAS,EACd,6BAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,MAAM,CAC7D,EAH4C,CAG5C,CAAC;AAES,QAAA,YAAY,GACvB,UAAC,IAAoB,EAAE,IAAiB;IACtC,IAAM,WAAW,GAAG,sBAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAE/C,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC,CAAC;QACzB,MAAM,IAAI,8BAAkB,EAAE,CAAC;IACjC,CAAC;IAMD,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,EAAC,SAAS,EAAE,WAAW,EAAC,CAAC,CAAC;AACjD,CAAC,CAAC","sourcesContent":["import * as R from 'ramda';\nimport * as semver from 'semver';\n\nimport { NoChangesException } from '../Exception';\nimport { detectChanges } from './detectChanges';\n\nimport { FileContent,  } from './Version';\nimport { ReleaseType } from 'semver';\nexport * from './Version';\n\n\ntype RawFileContent = FileContent & {\n  __version: string;\n}\n\nexport const getReleaseType = (prev: FileContent, next: FileContent): ReleaseType | 'none' => {\n  return detectChanges(prev, next) || 'none';\n}\n\n\nexport const getNextVersion = \n  (prev: RawFileContent, next: FileContent) => semver.inc(\n      prev.__version,\n      detectChanges(R.omit(['__version'], prev), next) || 'none'\n  );\n\nexport const applyVersion = \n  (prev: RawFileContent, next: FileContent): RawFileContent => {\n    const nextVersion = getNextVersion(prev, next);\n\n    if (nextVersion === null) {\n      throw new NoChangesException();\n    }\n\n\n    // TODO: Thinking of not applying hte version at this point,\n    //  instead just return a ReleaseType, and apply much higher up when saving to S3 for ex\n    //  This will make the file ahndling much easier, since there won't be any side effects.\n    return R.merge(next, {__version: nextVersion});\n  };\n"]}